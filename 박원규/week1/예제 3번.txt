# 예제 3번
# lr(learning rate) 값 변경 lr = 0.00002

import torch
import torch.nn as nn
import torch.nn.functional as F

class MultivariateLinearRegressionModel(nn.Module):
    def __init__(self):
        super(MultivariateLinearRegressionModel, self).__init__()
        self.linear = nn.Linear(3, 1)  # 입력값 3, 출력값 1로 설정

    def forward(self, x):
        return self.linear(x)

# 학습 데이터 설정
x_train = torch.FloatTensor([[73, 80, 75],
                              [93, 88, 93],
                              [89, 91, 90],
                              [96, 98, 100],
                              [73, 66, 70]])
y_train = torch.FloatTensor([[152], [185], [180], [196], [142]])

model = MultivariateLinearRegressionModel()

optimizer = torch.optim.SGD(model.parameters(), lr=0.00002)
epoch = 10000

# 손실 값 계산
for i in range(epoch):
    hy = model(x_train)

####################################################################
    cost = F.mse_loss(hy, y_train)  # 손실 값을 간단한 코드로 대체 가능

    optimizer.zero_grad()  # 로스값 초기화
    cost.backward()  # 역전파
    optimizer.step()  # 다시 학습(값 개선)

    if i % 1000 == 0:
        print('Epoch [{}/{}], Cost: {:.6f}'.format(i, epoch, cost.item()))


####################################################################
#테스트

test = torch.FloatTensor([[100, 110, 120]])
prediction = model(test).item()  # 모델을 통한 예측
print(prediction)
